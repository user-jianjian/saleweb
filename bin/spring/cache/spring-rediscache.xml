<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
		xmlns:beans="http://www.springframework.org/schema/beans"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-autowire="byName">
	
	<!-- 引入redis -->
	<beans:import resource="classpath:spring/redis/redis-pool.xml"/>
	
	<!-- redis 连接工厂 -->
	<bean id="cacheJedisConnectionFactory" class="org.walkframework.redis.BaseJedisConnectionFactory">
		<property name="poolConfig" ref="jedisPoolConfig"/>
		<property name="usePool" value="${redis.pool.use}"/>
		<property name="hostName" value="${redis.cache.host}"/>
		<property name="port" value="${redis.cache.port}"/>
		<property name="password" value="${redis.password}"/>
	</bean>
	
	<!-- redis 模板定义 -->
	<bean id="cacheRedisOperations" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="cacheJedisConnectionFactory"/>
        <!-- 序列化/反序列化解析器，默认是jdk自带的解析器，但性能比较低，待选择一个性能比较高的序列化工具在此指定即可
        <property name="keySerializer" value="XX"/>
        <property name="valueSerializer" value="XX"/>
        <property name="hashKeySerializer" value="XX"/>
        <property name="hashValueSerializer" value="XX"/>
        -->
	</bean>
	
	<!-- redis 缓存管理器。默认是动态缓存，如果名为cacheName的缓存不存在，调用redisCacheManager.getCache(cacheName)即会创建一个新的缓存。注意：如果定义了cacheNames，则会取消缓存的动态创建 -->
	<bean id="springCacheManager" class="org.walkframework.cache.redis.RedisCacheManagerDecorator">
		<property name="cacheManager">
			<bean class="org.walkframework.cache.redis.ext.CustomRedisCacheManager">
				<constructor-arg index="0" ref="cacheRedisOperations"/>
				<property name="usePrefix" value="${redis.cache.usePrefix}"/>
				<property name="loadRemoteCachesOnStartup" value="${redis.cache.loadRemoteCachesOnStartup}"/>
				<property name="cachePrefix">
					<bean class="org.walkframework.cache.redis.ext.CustomRedisCachePrefix">
						<constructor-arg name="delimiter" value="${redis.cache.delimiter}"/>
					</bean>
				</property>
				<!-- 默认缓存过期时间 -->
				<property name="defaultExpiration" value="${redis.cache.defaultExpiration}"/>
				<!-- 设置某些特殊缓存的过期时间 
				<property name="expires"> 
					<map> 
						<entry key="SHIRO_ACTIVE_SESSION_CACHE" value="${sessionTimeout}"/>
					</map>
				</property>
				-->
			</bean>
		</property>
	</bean>
	
	<!-- 启用缓存注解驱动 
    <cache:annotation-driven cache-manager="springCacheManager"/>
    -->
    
    <!-- 由于需要自定义缓存注解语法分析器，以下配置替代缓存注解驱动形式配置(cache:annotation-driven) -->
    <!-- 缓存注解语法分析器。自定义 -->
    <bean id="springCacheAnnotationParser" class="org.walkframework.cache.annotation.CustomSpringCacheAnnotationParser"/>
    
    <!-- 缓存注解操作源 -->
    <bean id="annotationCacheOperationSource" class="org.springframework.cache.annotation.AnnotationCacheOperationSource">
    	<constructor-arg name="annotationParser" ref="springCacheAnnotationParser"/>
    </bean>
	
	<!-- 缓存key生成器。自定义 -->
    <bean id="keyGenerator" class="org.walkframework.cache.annotation.CustomSimpleKeyGenerator"/>
    
    <!-- 缓存拦截器 -->
	<bean id="cacheInterceptor" class="org.walkframework.cache.annotation.CustomCacheInterceptor" p:cacheOperationSources-ref="annotationCacheOperationSource" p:cacheManager-ref="springCacheManager" p:keyGenerator-ref="keyGenerator" />

	<!-- 缓存拦截器 -->
	<bean id="beanFactoryCacheOperationSourceAdvisor" class="org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor" p:adviceBeanName="cacheInterceptor" p:cacheOperationSource-ref="annotationCacheOperationSource" />
    
</beans>
